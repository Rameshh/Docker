* Virtualization: Run multiple application on same machine. bulky in size, running multiple virtual machine leads to unstable performance, bootup take a long time, VM's would not solve the problems like portability, software updates, continous integration and continous deployment.

* Containerization is a type of virtualization which brings virtualization to the operating system level.
* Reason to use containers.
1. Containers have no guest OS and use the host's operating system. So, they share relevant libraries and resources as and when needed.
2. Processing and execution of applications are very fast since application specific binaries and libraries of containers run on the host kernel.
3. Booting up a container takes only a fraction of a second, and also containers are lightweight and faster than virtual machines.

* Docker is a platform which packages an application and all its dependencies together in the form of containers.
* Dockerfile: A Dockerfile is a text document which contains all the commands that a user can call on the command line to assemble an image. docker build to create an automated build to execute.

* Docker Image: Docker Image can be compared to a template which is used to create Docker Containers.
docker run to run the image and create container.
Docker images are stored in the Docker Registry.

* Docker Container: Docker Container is a running instance of a Docker image as they hold the entire package needed to run the application.

* Docker Compose: Docker compose is a YAML file which contains details about the services, networks, and volumes for setting up the Docker application.

* Docker Swarm: Docker Swarm is a technique to create and maintain a cluster of Docker Engines.

* Docker file containes below commands.
1. FROM: Specifies the image that has to be downloaded
2. MAINTAINER: Metadata of the owner who owns the image
3. RUN: Specifies the commands to be executed
4. ENTRYPOINT: Specifies the command which will be executed first
5. EXPOSE: Specifies the port on which the container is exposed

* Install Docker on Ubuntu
1. Let us update the packages.
   sudo apt-get update
2. Install the recommended packages.
   sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual
3. Install docker engine.
   sudo apt-get install docker-engine
4. Start the docker service.
   sudo service docker start
5. pull a CentOs image from docker hub and run the CentOs container.
   sudo docker pull centos
   sudo docker run -it centos
   
* Install Docker on CentOS
1. Update the system packages and install the required dependencies.
   sudo yum update
   sudo yum install yum-utils device-mapper-persistent-data lvm2
2. Add the Docker stable repository to your system.
   sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
3. Install the Docker.
   sudo yum install docker-ce
4. Start the Docker daemon and enable it to automatically start at boot time.
   sudo systemctl start docker
   sudo systemctl enable docker
5. To verify the Docker service is running.
   sudo systemctl status docker
6. To check Docker version.
   docker -v
   
* What is Docker -> Docker is a containerization platform that packages your application and all its dependencies together
in the form of a docker container to ensure that your application works seamlessly in any environment.

* What is Container -> Docker Container is a standardized unit which can be created on the fly to deploy a particular
application or environment.

* Comparision between Virtual Machine(VM) and Docker Container(DC).
1. Size -> VM required more size and DC required less size.
2. Starup -> VM takes more time bootup and DC takes less time to bootup.
3. Integration -> VM installtion of tools is hectic task and DC installation of tools is easy.

* Docker's Workflow.
1. Docker Daemon -> A persistent backgorund process that manages Docker images, containers, networks, and storage volumes. The Docker
   daemon constantly listens for Docker API requests and processes them.
2. Docker Engine REST API -> An API is used by applications to interact with the Docker daemon. It can be accessed by an HTTP client.
3. Docker CLI -> A command-line interface client for interacting with the Docker daemon.    

* Docker Architecture.
  Docker Architecture includes a Docker client - used to trigger Docker commands, a Docker Host - running the Docker Daemon and a
  Docker Registry - storing Docker Images. The Docker Daemon running within Docker host is responsible for the images and containers.
 
* Docker Objects.
1. Images -> Images are nothing but a read-only binary template that can build containers.
2. Containers -> Containers are sort of encapsulated environments in which you run applications.
3. Networks -> Which all the isolated container communicate.
@ Mainly five network drivers in docker:
  a. Bridge: It is the default network driver for a container.
  b. Host: This driver removes the network isolation between docker containers and docker host.
  c. Overlay: This network swarm services to communicate with each other.
  d. None: This driver disables all the networking.
  e. macvlan: This driver assigns mac address to containers to make them look like physical devices.
4. Storage -> Store data within the writable layer of a container but it requires a storage driver.
@ persistent storage, Docker offers four options:
  a. Data Volumes: They provide the ability to create persistent storage, with the ability to rename volumes, list volumes, 
     and also list the container that is associated with the volume.
  b. Volume Container: It is an alternative approach wherein a dedicated container hosts a volume and to mount that 
     volume to other containers.
  c. Directory Mounts: Another option is to mount a host's local directory into a container.
  d. Storage Plugins: Storage Plugins provide the ability to connect to external storage platforms.

* Docker Registry.
  Docker Registry is where the Docker Images are stored. The Registry can be either a user's local repository or a public 
  repository like a Docker Hub allowing multiple users to collaborate in building an application. Docker registries are 
  services that provide locations from where you can store and download images.
