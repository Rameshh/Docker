* Installing Docker from Default Repositories
1. Updating the Local Repository
sudo apt update
2. Uninstalling Old Docker Versions
sudo apt-get remove docker docker-engine docker.io
3. Installing Docker
sudo apt install docker.io
4. Checking Docker Installation
docker --version
5. Starting Docker Service 
sudo systemctl start docker
sudo systemctl enable docker
sudo systemctl status docker

* Docker image creation using the Flask framework
1. mkdir python-docker
2. cd python-docker
3. pip3 install Flask
4. pip3 freeze | grep Flask >> requirements.txt
5. touch app.py
6. touch Dockerfile
7. Building an image
   docker build --tag python-docker .
8. Viewing local images
   docker images
9. To create a new tag for the image
   docker tag python-docker:latest python-docker:v1.0.0
10. Removing the tag
    docker rmi python-docker:v1.0.0
11. Running image as a container
    docker run python-docker
12. Publish a port for our container
    docker run --publish 8000:5000 python-docker
13. Run in detached mode
    docker run -d -p 8000:5000 python-docker
14. List containers
    docker ps
15. To stop the container(container id or container name)
    docker stop containe name
16. To see all the running and stopped containers provide --all or -a
    docker ps -a
17. To start the container
    docker start container name
18. To restart the container
    docker restart container name
19. To remove a container(provide multiple containers)
    docker rm container name
20. Address the random container naming issue
    docker run -d -p 8000:5000 --name python-server python-docker
21. To see the dokcer logs use the container id or container name
    docker logs container id
22. To debugging docker using container id or container name
    docker exec -it container id /bin/bash

https://www.sentinelone.com/blog/create-docker-image/
* How to Create a Docker Image From a Container
1. Create a Base Container
   The Docker create command will create a new container for us from the command line.
   docker create --name nginx_base 80:80 nginx:alpine
2. Inspect Images
   docker images
3. Inspect Containers
   docker ps -a
4. Start the Container
   docker start nginx_base
5. Modify the Running Container
   docker cp index.html nginx_base:/usr/share/nginx/html/index.html
6. Create an Image From a Container
   docker commit nginx_base
7. Tag the Images
   docker tag image_id suraj_nginx
8. Create Images With Tags
   docker commit nginx_base suraj_nginx
9. Delete the Original Container
   docker ps
   docker stop nginx_base
   docker rm nginx_base

   let’s create a new container based on the image we just created and start it.
   docker run --name nginx_suraj -d -p 80:80 suraj_nginx

10. Look at Running Containers
    docker ps
    docker stop nginx_base

11. Consider Your Options
    docker run --name nginx_base --rm -d -p 80:80 nginx:alpine
    This command will run the image nginx:alpine with the name nginx_base; the creation of the image will be included in the command execution.
    The –rm will cause the container to be deleted when it is shut down. The -d tells the command line client to run in detached mode. 
    This will allow us to run other commands from the same terminal.

* Pushing images and tags into repository
1. Log into the Docker public registry from your local machine terminal using Docker CLI
   docker login
2. Tag the image
   docker tag python-docker:latest rameshhb/python-docker:latest
3. Publish the image
   docker push rameshhb/python-docker
4. Creating the tag
   docker tag 	python-docker:latest rameshhb/python-docker:v1.0-python-docker
5. Pushing tag into the repository
   docker push rameshhb/python-docker:v1.0-python-docker
6. Pulling latest image or tag from repository
   docker pull rameshhb/python-docker
7. Running the docker image
   docker run -it rameshhb/python-docker

