* Docker image creation using the Flask framework
1. mkdir python-docker
2. cd python-docker
3. pip3 install Flask
4. pip3 freeze | grep Flask >> requirements.txt
5. touch app.py
6. touch Dockerfile
7. Building an image
   docker build --tag python-docker .
8. Viewing local images
   docker images
9. To create a new tag for the image
   docker tag python-docker:latest python-docker:v1.0.0
10. Removing the tag
    docker rmi python-docker:v1.0.0
11. Running image as a container
    docker run python-docker
12. Publish a port for our container
    docker run --publish 8000:5000 python-docker
13. Run in detached mode
    docker run -d -p 8000:5000 python-docker
14. List containers
    docker ps
15. To stop the container(container id or container name)
    docker stop containe name
16. To see all the running and stopped containers provide --all or -a
    docker ps -a
17. To start the container
    docker start container name
18. To restart the container
    docker restart container name
19. To remove a container(provide multiple containers)
    docker rm container name
20. Address the random container naming issue
    docker run -d -p 8000:5000 --name python-server python-docker
21. To see the dokcer logs use the container id or container name
    docker logs container id
22. To debugging docker using container id or container name
    docker exec -it container id /bin/bash

* Run a database in a container
1. Let’s create our volumes now. We’ll create one for the data and one for configuration of MySQL.
   docker volume create mysql
   docker volume create mysql_config
2. Now we’ll create a network that our application and database will use to talk to each other.
   docker network create mysqlnet
3. For below command option -v is for starting the container with volumes. 
   docker run --rm -d -v mysql:/var/lib/mysql \
   -v mysql_config:/etc/mysql -p 3406:3406 \
   --network mysqlnet \
   --name mysqldb \
   -e MYSQL_ROOT_PASSWORD=p@ssw0rd1 \
   mysql
4. Now, let’s make sure that our MySQL database is running and that we can connect to it. Connect to the running 
   MySQL database inside the container using the following command and enter “p@ssw0rd1” when prompted for the password:
   docker exec -ti mysqldb mysql -u root -p

* Connect the application to the database
1. Okay, now that we have a running MySQL, let’s update the app.py to use MySQL as a datastore. Let’s also add some routes to our server. 
   One for fetching records and one for inserting records in app.py file. 
   
2. First, let’s add the mysql-connector-python module to our application using pip.
   pip3 install mysql-connector-python
   pip3 freeze | grep mysql-connector-python >> requirements.txt
3. Now we can build our image.
   docker build --tag python-docker-dev .
4. Now, let’s add the container to the database network and then run our container. This allows us to access the database by its container name.
   docker run \
   --rm -d \
   --network mysqlnet \
   --name rest-server \
   -p 8000:5000 \
   python-docker-dev
5. Let’s test that our application is connected to the database and is able to add a note.
   curl http://localhost:8000/initdb
   curl http://localhost:8000/widgets

* Use Compose to develop locally
1. create a new file named docker-compose.dev.yml. Copy and paste the following commands into the file.
2. Now, to start our application and to confirm that it is running properly, run the following command:
   docker-compose -f docker-compose.dev.yml up --build
   We pass the --build flag so Docker will compile our image and then start the containers.
   NOTE: If we get below error while building docker-compose.dev.yml file
   Building notes
   ERROR: Cannot locate specified Dockerfile: Dockerfile
   Answer: We need to in the build section of the docker-compose.dev.yml for context and docker file.
   build:
    context: app
    dockerfile: node.Dockerfile
    context:   
3. Now let’s test our API endpoint. Open a new terminal then make a GET request to the server using the curl commands:
   curl http://localhost:8000/initdb
   curl http://localhost:8000/widgets
   You should receive the following response:
   []
   This is because our database is empty.
  
 
